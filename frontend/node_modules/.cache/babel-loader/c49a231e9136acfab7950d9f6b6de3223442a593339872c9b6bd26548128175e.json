{"ast":null,"code":"var _jsxFileName = \"D:\\\\glb-viewer-app\\\\frontend\\\\src\\\\components\\\\ModelViewer.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Canvas, useThree } from '@react-three/fiber';\nimport { OrbitControls, useGLTF, Bounds } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CenterModel({\n  scene\n}) {\n  _s();\n  const {\n    camera\n  } = useThree();\n  const bounds = useRef();\n  useEffect(() => {\n    // Wait for bounds to calculate\n    if (bounds.current) {\n      // Get the bounding box of the model\n      bounds.current.refresh(scene).clip().fit();\n\n      // Reset camera position based on the model bounds\n      camera.position.set(0, 0, bounds.current.getSize().z * 1.5);\n      camera.lookAt(0, 0, 0);\n      camera.updateProjectionMatrix();\n    }\n  }, [scene, camera]);\n  return /*#__PURE__*/_jsxDEV(Bounds, {\n    ref: bounds,\n    children: /*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: scene\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(CenterModel, \"rzZzlmbuo/8xsmQ5GfnZCLXqZnM=\", false, function () {\n  return [useThree];\n});\n_c = CenterModel;\nfunction ModelViewer({\n  modelId\n}) {\n  _s2();\n  const {\n    scene\n  } = useGLTF(`http://localhost:5000/api/models/${modelId}`);\n\n  // Reset rotation and position of the model\n  scene.rotation.set(0, 0, 0);\n  scene.position.set(0, 0, 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-full\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 5],\n        fov: 60\n      },\n      style: {\n        width: '100vw',\n        height: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n        position: [10, 10, 5],\n        intensity: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CenterModel, {\n        scene: scene\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enablePan: true,\n        enableZoom: true,\n        minDistance: 1,\n        maxDistance: 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s2(ModelViewer, \"o+hqw2nGnmzAsiWsKcbG4W2mWg4=\", false, function () {\n  return [useGLTF];\n});\n_c2 = ModelViewer;\nexport default ModelViewer;\nvar _c, _c2;\n$RefreshReg$(_c, \"CenterModel\");\n$RefreshReg$(_c2, \"ModelViewer\");","map":{"version":3,"names":["React","useEffect","useRef","Canvas","useThree","OrbitControls","useGLTF","Bounds","jsxDEV","_jsxDEV","CenterModel","scene","_s","camera","bounds","current","refresh","clip","fit","position","set","getSize","z","lookAt","updateProjectionMatrix","ref","children","object","fileName","_jsxFileName","lineNumber","columnNumber","_c","ModelViewer","modelId","_s2","rotation","className","fov","style","width","height","intensity","enablePan","enableZoom","minDistance","maxDistance","_c2","$RefreshReg$"],"sources":["D:/glb-viewer-app/frontend/src/components/ModelViewer.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { Canvas, useThree } from '@react-three/fiber';\r\nimport { OrbitControls, useGLTF, Bounds } from '@react-three/drei';\r\n\r\nfunction CenterModel({ scene }) {\r\n  const { camera } = useThree();\r\n  const bounds = useRef();\r\n\r\n  useEffect(() => {\r\n    // Wait for bounds to calculate\r\n    if (bounds.current) {\r\n      // Get the bounding box of the model\r\n      bounds.current.refresh(scene).clip().fit();\r\n      \r\n      // Reset camera position based on the model bounds\r\n      camera.position.set(0, 0, bounds.current.getSize().z * 1.5);\r\n      camera.lookAt(0, 0, 0);\r\n      camera.updateProjectionMatrix();\r\n    }\r\n  }, [scene, camera]);\r\n\r\n  return (\r\n    <Bounds ref={bounds}>\r\n      <primitive object={scene} />\r\n    </Bounds>\r\n  );\r\n}\r\n\r\nfunction ModelViewer({ modelId }) {\r\n  const { scene } = useGLTF(`http://localhost:5000/api/models/${modelId}`);\r\n  \r\n  // Reset rotation and position of the model\r\n  scene.rotation.set(0, 0, 0);\r\n  scene.position.set(0, 0, 0);\r\n\r\n  return (\r\n    <div className=\"w-full h-full\">\r\n      <Canvas\r\n        camera={{ position: [0, 0, 5], fov: 60 }}\r\n        style={{ width: '100vw', height: '100vh' }}\r\n      >\r\n        <ambientLight intensity={0.5} />\r\n        <directionalLight position={[10, 10, 5]} intensity={1} />\r\n        <CenterModel scene={scene} />\r\n        <OrbitControls \r\n          enablePan={true} \r\n          enableZoom={true}\r\n          minDistance={1}\r\n          maxDistance={10}\r\n        />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModelViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}